diff --git a/epics/ca.py b/epics/ca.py
index efdff4e..e0628ee 100755
--- a/epics/ca.py
+++ b/epics/ca.py
@@ -267,59 +267,11 @@ def _find_lib(inp_lib_name):
     # Test 1: if PYEPICS_LIBCA env var is set, use it.
     dllpath = os.environ.get('PYEPICS_LIBCA', None)

-    # find libCom.so *next to* libca.so if PYEPICS_LIBCA was set
-    if dllpath is not None and inp_lib_name != 'ca':
-        _parent, _name = os.path.split(dllpath)
-        dllpath = os.path.join(_parent, _name.replace('ca', inp_lib_name))
-
-    if (dllpath is not None and os.path.exists(dllpath) and
-            os.path.isfile(dllpath)):
-        return dllpath
-
-    # Test 2: look in installed python location for dll
-    dllpath = resource_filename('epics.clibs', clib_search_path(inp_lib_name))
-
-    if (os.path.exists(dllpath) and os.path.isfile(dllpath)):
+    if dllpath is not None:
         return dllpath

-    # Test 3: look through Python path and PATH env var for dll
-    path_sep = ':'
-    dylib = 'lib'
-    # For windows, we assume the DLLs are installed with the library
-    if os.name == 'nt':
-        path_sep = ';'
-        dylib = 'DLLs'
-
-    basepath = os.path.split(os.path.abspath(__file__))[0]
-    parent   = os.path.split(basepath)[0]
-    _path = [basepath, parent,
-             os.path.join(parent, dylib),
-             os.path.split(os.path.dirname(os.__file__))[0],
-             os.path.join(sys.prefix, dylib)]
-
-    def envpath2list(envname, path_sep):
-        plist = ['']
-        try:
-            plist = os.environ.get(envname, '').split(path_sep)
-        except AttributeError:
-            pass
-        return plist
-
-    env_path = envpath2list('PATH', path_sep)
-    ldname = 'LD_LIBRARY_PATH'
-    if sys.platform == 'darwin':
-        ldname = 'DYLD_LIBRARY_PATH'
-    env_ldpath = envpath2list(ldname, path_sep)
-
-    search_path = []
-    for adir in (_path + env_path + env_ldpath):
-        if adir not in search_path and os.path.isdir(adir):
-            search_path.append(adir)
-
-    os.environ['PATH'] = path_sep.join(search_path)
-    # with PATH set above, the ctypes utility, find_library *should*
-    # find the dll....
     dllpath = ctypes.util.find_library(inp_lib_name)
+
     if dllpath is not None:
         return dllpath

index 0c48f10..0000000
Binary files a/epics/clibs/win64/caRepeater.exe and /dev/null differ
diff --git a/setup.py b/setup.py
index 7ca751f..92abca7 100644
--- a/setup.py
+++ b/setup.py
@@ -30,33 +30,6 @@ to help write GUIs for CA.
 '''

 #
-no_libca="""*******************************************************
-*** WARNING - WARNING - WARNING - WARNING - WARNING ***
-
-       Could not find CA dynamic library!
-
-A dynamic library (libca.so or libca.dylib) for EPICS CA
-must be found in order for EPICS calls to work properly.
-
-Please read the INSTALL inststructions, and fix this
-problem before tyring to use the epics package.
-*******************************************************
-"""
-
-nolibca = os.environ.get('NOLIBCA', None)
-if nolibca is None:
-    pkg_data = {'epics.clibs': ['darwin64/*', 'linux64/*', 'linux32/*',
-                                'linuxarm/*', 'win32/*', 'win64/*']}
-else:
-    pkg_data = dict()
-
-PY_MAJOR, PY_MINOR = sys.version_info[:2]
-if PY_MAJOR == 2 and PY_MINOR < 6:
-    shutil.copy(pjoin('epics', 'utils3.py'),
-                pjoin('epics', 'utils3_save_py.txt'))
-    shutil.copy(pjoin('epics', 'utils2.py'),
-                pjoin('epics', 'utils3.py'))
-
 setup(name = 'pyepics',
       version = versioneer.get_version(),
       cmdclass = versioneer.get_cmdclass(),
@@ -73,11 +46,5 @@ setup(name = 'pyepics',
                       'Programming Language :: Python',
                       'Topic :: Scientific/Engineering'],
       packages = ['epics','epics.wx','epics.devices', 'epics.compat',
-                  'epics.autosave', 'epics.clibs'],
-      package_data = pkg_data,
+                  'epics.autosave'],
      )
-
-try:
-    libca = epics.ca.find_libca()
-except:
-    sys.stdout.write("%s" % no_libca)
